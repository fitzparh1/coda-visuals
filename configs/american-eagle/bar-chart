<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="preconnect" href="https://cdn.jsdelivr.net" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js" defer></script>
  <style>
    :root { --bg:#fff; --fg:#111; }
    html,body { height:100%; margin:0; background:var(--bg); color:var(--fg); font:14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
    .wrap { max-width:720px; margin:0 auto; padding:12px; }
    .box  { background:#fff; border:1px solid #e9ecef; border-radius:12px; padding:12px; height:420px; }
    .chart-legend { text-align:center; margin-top:6px; color:var(--fg); }
    canvas { width:100%; height:100%; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="box">
      <canvas id="chart"></canvas>
    </div>
  </div>

<script>
// Data replicated from the screenshot
const labels = ["Model Y","Cybertruck","Model 3","Model X","Model S","Roadster"];
const values = [123000, 106500, 72000, 27000, 25575, 24000];

function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

// Responsive helper (similar to the repo)
const BOX_RATIO = 16 / 9;
const MIN_HEIGHT = 260;
const boxEl = document.querySelector('.box');
function fitBoxHeight(){
  const w = boxEl.clientWidth || 0;
  const h = Math.max(MIN_HEIGHT, Math.round(w / BOX_RATIO));
  boxEl.style.height = h + 'px';
}
new ResizeObserver(fitBoxHeight).observe(boxEl);
window.addEventListener('load', fitBoxHeight);

const ctx = document.getElementById('chart').getContext('2d');
new Chart(ctx, {
  type: 'bar',
  data: {
    labels,
    datasets: [{
      label: 'Tesla',
      data: values,
      backgroundColor: '#4B2E83', // deep purple
      borderWidth: 0,
      barPercentage: 0.7,
      categoryPercentage: 0.7
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'bottom',
        labels: { usePointStyle: true, pointStyle: 'circle', boxWidth: 8, boxHeight: 8 }
      },
      tooltip: {
        enabled: true,
        callbacks: {
          title: (items) => items[0]?.label || '',
          label: (ctx) => {
            const v = ctx.parsed.y;
            return `Tesla: ${numberWithCommas(v)} (100%)`;
          }
        }
      }
    },
    interaction: { mode: 'index', intersect: false },
    scales: {
      y: {
        beginAtZero: true,
        suggestedMax: 140000,
        grid: { color: 'rgba(0,0,0,0.06)' },
        ticks: { callback: (v) => numberWithCommas(v) }
      },
      x: { grid: { display: false } }
    }
  }
});
</script>
</body>
</html>
